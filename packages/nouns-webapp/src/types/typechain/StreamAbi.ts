/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from './common'

export interface StreamAbiInterface extends utils.Interface {
  functions: {
    'cancel()': FunctionFragment
    'elapsedTime()': FunctionFragment
    'factory()': FunctionFragment
    'initialize()': FunctionFragment
    'payer()': FunctionFragment
    'recipient()': FunctionFragment
    'recipientBalance()': FunctionFragment
    'recipientCancelBalance()': FunctionFragment
    'recoverTokens(address,uint256)': FunctionFragment
    'remainingBalance()': FunctionFragment
    'rescueETH(address,uint256)': FunctionFragment
    'startTime()': FunctionFragment
    'stopTime()': FunctionFragment
    'token()': FunctionFragment
    'tokenAmount()': FunctionFragment
    'tokenAndOutstandingBalance()': FunctionFragment
    'withdraw(uint256)': FunctionFragment
    'withdrawAfterCancel(uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'cancel'
      | 'elapsedTime'
      | 'factory'
      | 'initialize'
      | 'payer'
      | 'recipient'
      | 'recipientBalance'
      | 'recipientCancelBalance'
      | 'recoverTokens'
      | 'remainingBalance'
      | 'rescueETH'
      | 'startTime'
      | 'stopTime'
      | 'token'
      | 'tokenAmount'
      | 'tokenAndOutstandingBalance'
      | 'withdraw'
      | 'withdrawAfterCancel',
  ): FunctionFragment

  encodeFunctionData(functionFragment: 'cancel', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'elapsedTime',
    values?: undefined,
  ): string
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string
  encodeFunctionData(functionFragment: 'initialize', values?: undefined): string
  encodeFunctionData(functionFragment: 'payer', values?: undefined): string
  encodeFunctionData(functionFragment: 'recipient', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'recipientBalance',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'recipientCancelBalance',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'recoverTokens',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'remainingBalance',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'rescueETH',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(functionFragment: 'startTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'stopTime', values?: undefined): string
  encodeFunctionData(functionFragment: 'token', values?: undefined): string
  encodeFunctionData(
    functionFragment: 'tokenAmount',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'tokenAndOutstandingBalance',
    values?: undefined,
  ): string
  encodeFunctionData(
    functionFragment: 'withdraw',
    values: [PromiseOrValue<BigNumberish>],
  ): string
  encodeFunctionData(
    functionFragment: 'withdrawAfterCancel',
    values: [PromiseOrValue<BigNumberish>],
  ): string

  decodeFunctionResult(functionFragment: 'cancel', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'elapsedTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'payer', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'recipient', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'recipientBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'recipientCancelBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'recoverTokens',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'remainingBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'rescueETH', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'startTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'stopTime', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'tokenAmount', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'tokenAndOutstandingBalance',
    data: BytesLike,
  ): Result
  decodeFunctionResult(functionFragment: 'withdraw', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'withdrawAfterCancel',
    data: BytesLike,
  ): Result

  events: {
    'ETHRescued(address,address,uint256)': EventFragment
    'StreamCancelled(address,address,address,uint256)': EventFragment
    'TokensRecovered(address,address,uint256)': EventFragment
    'TokensWithdrawn(address,address,uint256)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'ETHRescued'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'StreamCancelled'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokensRecovered'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'TokensWithdrawn'): EventFragment
}

export interface ETHRescuedEventObject {
  payer: string
  to: string
  amount: BigNumber
}
export type ETHRescuedEvent = TypedEvent<
  [string, string, BigNumber],
  ETHRescuedEventObject
>

export type ETHRescuedEventFilter = TypedEventFilter<ETHRescuedEvent>

export interface StreamCancelledEventObject {
  msgSender: string
  payer: string
  recipient: string
  recipientBalance: BigNumber
}
export type StreamCancelledEvent = TypedEvent<
  [string, string, string, BigNumber],
  StreamCancelledEventObject
>

export type StreamCancelledEventFilter = TypedEventFilter<StreamCancelledEvent>

export interface TokensRecoveredEventObject {
  payer: string
  tokenAddress: string
  amount: BigNumber
}
export type TokensRecoveredEvent = TypedEvent<
  [string, string, BigNumber],
  TokensRecoveredEventObject
>

export type TokensRecoveredEventFilter = TypedEventFilter<TokensRecoveredEvent>

export interface TokensWithdrawnEventObject {
  msgSender: string
  recipient: string
  amount: BigNumber
}
export type TokensWithdrawnEvent = TypedEvent<
  [string, string, BigNumber],
  TokensWithdrawnEventObject
>

export type TokensWithdrawnEventFilter = TypedEventFilter<TokensWithdrawnEvent>

export interface StreamAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: StreamAbiInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    elapsedTime(overrides?: CallOverrides): Promise<[BigNumber]>

    factory(overrides?: CallOverrides): Promise<[string]>

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    payer(overrides?: CallOverrides): Promise<[string]>

    recipient(overrides?: CallOverrides): Promise<[string]>

    recipientBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    recipientCancelBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    remainingBalance(overrides?: CallOverrides): Promise<[BigNumber]>

    rescueETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>

    stopTime(overrides?: CallOverrides): Promise<[BigNumber]>

    token(overrides?: CallOverrides): Promise<[string]>

    tokenAmount(overrides?: CallOverrides): Promise<[BigNumber]>

    tokenAndOutstandingBalance(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    withdrawAfterCancel(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>
  }

  cancel(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  elapsedTime(overrides?: CallOverrides): Promise<BigNumber>

  factory(overrides?: CallOverrides): Promise<string>

  initialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  payer(overrides?: CallOverrides): Promise<string>

  recipient(overrides?: CallOverrides): Promise<string>

  recipientBalance(overrides?: CallOverrides): Promise<BigNumber>

  recipientCancelBalance(overrides?: CallOverrides): Promise<BigNumber>

  recoverTokens(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  remainingBalance(overrides?: CallOverrides): Promise<BigNumber>

  rescueETH(
    to: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  startTime(overrides?: CallOverrides): Promise<BigNumber>

  stopTime(overrides?: CallOverrides): Promise<BigNumber>

  token(overrides?: CallOverrides): Promise<string>

  tokenAmount(overrides?: CallOverrides): Promise<BigNumber>

  tokenAndOutstandingBalance(
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber]>

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  withdrawAfterCancel(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  callStatic: {
    cancel(overrides?: CallOverrides): Promise<void>

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<string>

    initialize(overrides?: CallOverrides): Promise<void>

    payer(overrides?: CallOverrides): Promise<string>

    recipient(overrides?: CallOverrides): Promise<string>

    recipientBalance(overrides?: CallOverrides): Promise<BigNumber>

    recipientCancelBalance(overrides?: CallOverrides): Promise<BigNumber>

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    remainingBalance(overrides?: CallOverrides): Promise<BigNumber>

    rescueETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    startTime(overrides?: CallOverrides): Promise<BigNumber>

    stopTime(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<string>

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>

    tokenAndOutstandingBalance(
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber]>

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>

    withdrawAfterCancel(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<void>
  }

  filters: {
    'ETHRescued(address,address,uint256)'(
      payer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): ETHRescuedEventFilter
    ETHRescued(
      payer?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      amount?: null,
    ): ETHRescuedEventFilter

    'StreamCancelled(address,address,address,uint256)'(
      msgSender?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      recipientBalance?: null,
    ): StreamCancelledEventFilter
    StreamCancelled(
      msgSender?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      recipientBalance?: null,
    ): StreamCancelledEventFilter

    'TokensRecovered(address,address,uint256)'(
      payer?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      amount?: null,
    ): TokensRecoveredEventFilter
    TokensRecovered(
      payer?: PromiseOrValue<string> | null,
      tokenAddress?: null,
      amount?: null,
    ): TokensRecoveredEventFilter

    'TokensWithdrawn(address,address,uint256)'(
      msgSender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): TokensWithdrawnEventFilter
    TokensWithdrawn(
      msgSender?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      amount?: null,
    ): TokensWithdrawnEventFilter
  }

  estimateGas: {
    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    elapsedTime(overrides?: CallOverrides): Promise<BigNumber>

    factory(overrides?: CallOverrides): Promise<BigNumber>

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    payer(overrides?: CallOverrides): Promise<BigNumber>

    recipient(overrides?: CallOverrides): Promise<BigNumber>

    recipientBalance(overrides?: CallOverrides): Promise<BigNumber>

    recipientCancelBalance(overrides?: CallOverrides): Promise<BigNumber>

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    remainingBalance(overrides?: CallOverrides): Promise<BigNumber>

    rescueETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    startTime(overrides?: CallOverrides): Promise<BigNumber>

    stopTime(overrides?: CallOverrides): Promise<BigNumber>

    token(overrides?: CallOverrides): Promise<BigNumber>

    tokenAmount(overrides?: CallOverrides): Promise<BigNumber>

    tokenAndOutstandingBalance(overrides?: CallOverrides): Promise<BigNumber>

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    withdrawAfterCancel(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>
  }

  populateTransaction: {
    cancel(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    elapsedTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>

    initialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    payer(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recipient(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recipientBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    recipientCancelBalance(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    recoverTokens(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    remainingBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>

    rescueETH(
      to: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    stopTime(overrides?: CallOverrides): Promise<PopulatedTransaction>

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>

    tokenAndOutstandingBalance(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    withdrawAfterCancel(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>
  }
}
