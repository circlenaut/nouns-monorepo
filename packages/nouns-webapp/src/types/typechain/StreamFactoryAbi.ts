/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  EventFragment,
  FunctionFragment,
  Result,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  OnEvent,
  PromiseOrValue,
  TypedEvent,
  TypedEventFilter,
  TypedListener,
} from './common'

export interface StreamFactoryAbiInterface extends utils.Interface {
  functions: {
    'createAndFundStream(address,uint256,address,uint256,uint256)': FunctionFragment
    'createStream(address,uint256,address,uint256,uint256,uint8,address)': FunctionFragment
    'predictStreamAddress(address,address,address,uint256,address,uint256,uint256)': FunctionFragment
    'streamImplementation()': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'createAndFundStream'
      | 'createStream'
      | 'predictStreamAddress'
      | 'streamImplementation',
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'createAndFundStream',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'createStream',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'predictStreamAddress',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
    ],
  ): string
  encodeFunctionData(
    functionFragment: 'streamImplementation',
    values?: undefined,
  ): string

  decodeFunctionResult(
    functionFragment: 'createAndFundStream',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'createStream',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'predictStreamAddress',
    data: BytesLike,
  ): Result
  decodeFunctionResult(
    functionFragment: 'streamImplementation',
    data: BytesLike,
  ): Result

  events: {
    'StreamCreated(address,address,address,uint256,address,uint256,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'StreamCreated'): EventFragment
}

export interface StreamCreatedEventObject {
  msgSender: string
  payer: string
  recipient: string
  tokenAmount: BigNumber
  tokenAddress: string
  startTime: BigNumber
  stopTime: BigNumber
  streamAddress: string
}
export type StreamCreatedEvent = TypedEvent<
  [string, string, string, BigNumber, string, BigNumber, BigNumber, string],
  StreamCreatedEventObject
>

export type StreamCreatedEventFilter = TypedEventFilter<StreamCreatedEvent>

export interface StreamFactoryAbi extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: StreamFactoryAbiInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    createAndFundStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    createStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      predictedStreamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<ContractTransaction>

    predictStreamAddress(
      msgSender: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<[string]>

    streamImplementation(overrides?: CallOverrides): Promise<[string]>
  }

  createAndFundStream(
    recipient: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    stopTime: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  createStream(
    recipient: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    stopTime: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    predictedStreamAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> },
  ): Promise<ContractTransaction>

  predictStreamAddress(
    msgSender: PromiseOrValue<string>,
    payer: PromiseOrValue<string>,
    recipient: PromiseOrValue<string>,
    tokenAmount: PromiseOrValue<BigNumberish>,
    tokenAddress: PromiseOrValue<string>,
    startTime: PromiseOrValue<BigNumberish>,
    stopTime: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides,
  ): Promise<string>

  streamImplementation(overrides?: CallOverrides): Promise<string>

  callStatic: {
    createAndFundStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    createStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      predictedStreamAddress: PromiseOrValue<string>,
      overrides?: CallOverrides,
    ): Promise<string>

    predictStreamAddress(
      msgSender: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<string>

    streamImplementation(overrides?: CallOverrides): Promise<string>
  }

  filters: {
    'StreamCreated(address,address,address,uint256,address,uint256,uint256,address)'(
      msgSender?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      tokenAddress?: null,
      startTime?: null,
      stopTime?: null,
      streamAddress?: null,
    ): StreamCreatedEventFilter
    StreamCreated(
      msgSender?: PromiseOrValue<string> | null,
      payer?: PromiseOrValue<string> | null,
      recipient?: PromiseOrValue<string> | null,
      tokenAmount?: null,
      tokenAddress?: null,
      startTime?: null,
      stopTime?: null,
      streamAddress?: null,
    ): StreamCreatedEventFilter
  }

  estimateGas: {
    createAndFundStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    createStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      predictedStreamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<BigNumber>

    predictStreamAddress(
      msgSender: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<BigNumber>

    streamImplementation(overrides?: CallOverrides): Promise<BigNumber>
  }

  populateTransaction: {
    createAndFundStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    createStream(
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      predictedStreamAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> },
    ): Promise<PopulatedTransaction>

    predictStreamAddress(
      msgSender: PromiseOrValue<string>,
      payer: PromiseOrValue<string>,
      recipient: PromiseOrValue<string>,
      tokenAmount: PromiseOrValue<BigNumberish>,
      tokenAddress: PromiseOrValue<string>,
      startTime: PromiseOrValue<BigNumberish>,
      stopTime: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>

    streamImplementation(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>
  }
}
